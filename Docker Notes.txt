Docker setup commands:

1.sudo apt-get update
2.sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
3.curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
4.echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
5.sudo apt-get update
6.sudo apt-get install docker-ce docker-ce-cli containerd.io
7.sudo systemctl start docker
8.sudo systemctl enable docker
9.sudo docker run hello-world
10.docker --version

Docker file creation:

1. Name the file as Dockerfile
2. FROM - Set the baseImage to use for subsequent instructions. FROM must be the first instruction in a Dockerfile.
	Ex: FROM node:alpine
3. COPY - Copy files or folders from source to the dest path in the image's filesystem.
	Ex: COPY hello.txt /absolute/path
4. WORKDIR - Set the working directory for any subsequent ADD, COPY, CMD, ENTRYPOINT, or RUN instructions that follow it in the Dockerfile.
	Ex: WORKDIR /path/to/workdir
5. CMD: Provide defaults for an executing container. If an executable is not specified, then ENTRYPOINT must be specified as well. There can only be one CMD instruction in a Dockerfile.
	Ex: node app.js
	
Building a Docker image:

1. Give the below command to build a docker image
	docker build -t "image_name" "PATH"
	Ex: docker build -t timer-app .
	
	Note: If we are in the path of the Dockerfile then no need to mention the path of the Dockerfile location. Instead we can give . (period) to mention the current path.
	
Running a docker image:

1. docker run "image_name"
	Ex: docker run timer-app

Pulling docker image from docker hub:

1. docker pull "image_name"
	Ex: docker pull ubuntu
	
	Note: We can give "docker run ubuntu" directly, If our system doesn't have the given docker image, It'll pull it automatically from the docker hub.
	
To check running containers:

1. docker ps : Which will show the current running containers
2. docker ps -a : Which will show all the containers status.

To run a docker container in interactive mode:

1. docker run -it "container_name"
	Ex: docker run -it ubuntu
	
	Note: -it -> Interactive mode
	
root@69133bc475f0:/#

root: Highest privilages
69133bc475f0: Name of the machine
/: Root directory, Highest directory
$: Normal user
#: Root user

bin : Binary files
boot : Files required for booting
dev : Files related to Devices
etc : Editable text configuration: Configuration files
home : Home directory where all the users are present
root : Home directory of root user
lib : Used to keep library files (Software library dependencies)
var : Variable : This is where we have files updated frequently like, log files, application data ...
proc : Contains files that represents runnings processes

pwd: Print Working Directory
cd ~ : Will navigate to the home directory of that specific user.
cat : Concatenate files together
more : to view large files content. (But can't go upwards)
less : Upgraded version of more. We can go upwards/downwards...
head -n 5 "file" : Will show first five lines of the file.
tail -n 5 "file" : Last 5 lines o the file.


Docker login in Ubuntu:

1. docker login
2. Give username and Password of Docker account.

kartheek@DevOps-Training
:~/Documents/Practice/DevOps-Training/docker-practice (main) $ docker images
REPOSITORY    TAG       IMAGE ID       CREATED         SIZE
timer-app     latest    8c0a6223b1b7   5 hours ago     156MB
ubuntu        latest    edbfe74c41f8   2 weeks ago     78.1MB
hello-world   latest    d2c94e258dcb   15 months ago   13.3kB


kartheek@DevOps-Training
:~/Documents/Practice/DevOps-Training/docker-practice (main) $ docker tag 8c0a6223b1b7 kartheek30/timerapp:latest


kartheek@DevOps-Training
:~/Documents/Practice/DevOps-Training/docker-practice (main) $ docker push kartheek30/timerapp:latest
The push refers to repository [docker.io/kartheek30/timerapp]
5f70bf18a086: Pushed
af26c9683447: Pushed
ab20bee7d0ba: Mounted from library/node
e9045a3f44f4: Mounted from library/node
a1b775a71df0: Mounted from library/node
78561cef0761: Mounted from library/node
latest: digest: sha256:a6377e7615b8aa28f876ca554aba9f9d184b61a209a709eb8303d378a4c7f374 size: 1571


Tagging a docker image:

1. docker tag "image_id" "user_name"/"Repsitory_name":"TAG"
	Ex: docker tag 8c0a6223b1b7 kartheek30/timerapp:latest

Pushing an image to Docker hub:

1. docker push "user_name"/"Repsitory_name":"TAG"
	Ex: docker push kartheek30/timerapp:latest